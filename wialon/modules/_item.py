
class Item:
    def __init__(self, session):
        self.session session

    def update_custom_property(self, itemId, name, value):
        """
                Delete property
        To delete custom property, use the same command but with empty value param:
        """
        params = locals()
        params.pop('self')
        return self.session.call("item/update_custom_property", **params)


    def update_ftp_property(self, itemId, host, login, pass, path, check, hostingFtp):
        """
                Parameters
         Name  Description  itemId  resource ID 
         host  FTP URL 
         login  FTP login 
         pass  FTP password 
         path  directory path 
         check  valid FTP settings: 1-yes(default), 0-no 
         hostingFtp  send data to Wialon Hosting FTP: 1 - yes, 0 - no  To send data to custom  FTP - “hostingFtp” must be 0, check - 1.
        Response{
           "hs":<text>,/* FTP URL */  
           "lg":<text>,/* FTP login */  
           "pt":<text>,/* directory path */  
           "ch":<uint>,/* valid FTP settings */  
           "tp":<uint>/* send data to Wialon Hosting FTP */  
        }
        
        """
        params = locals()
        params.pop('self')
        return self.session.call("item/update_ftp_property", **params)


    def update_admin_field(self, itemId, id, callMode, n, v):
        """
                Parameters
         Name  Description  itemId  item ID 
         id  administrative field ID (not taken into account when creating; IDs for new administrative fields are generated by the system) 
         callMode  action: create, update, delete 
         Optional parameters (required for create and update)  
         n  administrative field name 
         v  administrative field value Response
        When creating or updating administrative fields, response format will be:[
        <long>,/* administrative field ID */
        {
        "id":<long>,/* administrative field ID */
        "n":<text>,/* name */
        "v":<text>/* value */
        }
        ]When deleting:[
        <long>,/* administrative field ID */
        null
        ]
        
        """
        params = locals()
        params.pop('self')
        return self.session.call("item/update_admin_field", **params)


    def update_name(self, itemId, name):
        """
                Parameters
         Name  Description  itemId  item ID 
         name  new name (at least 4 characters) Response{
        "nm":<text>/* item new name */
        }
        
        """
        params = locals()
        params.pop('self')
        return self.session.call("item/update_name", **params)


    def update_profile_field(self, itemId, n, v):
        """
                Parameters
         Name  Description  itemId  item ID 
         n  custom field name 
         v  custom field value Profile fields
        You can use following profile fields:
         Name  Description  vehicle_class  Vehicle type 
         vin   VIN 
         registration_plate  Registration plate 
         brand  Brand 
         model  Model 
         year   Year 
         color  Color 
         engine_model  Engine model 
         engine_power  Engine power, kW 
         engine_displacement  Engine displacement, ccm 
         primary_fuel_type  Primary fuel type 
         cargo_type  Cargo type 
         carrying_capacity  Carrying capacity, t 
         width   Width, mm 
         height   Height, mm 
         depth   Depth, mm 
         effective_capacity  Effective capacity 
         gross_vehicle_weight  Gross vehicle weight 
         axles  Axles Response[
        <long>,/* field ID */
        {
        "id":<long>,/* field ID */
        "n":<text>,/* field name */
        "v":<text>/* field value */
        }
        ]
        
        """
        params = locals()
        params.pop('self')
        return self.session.call("item/update_profile_field", **params)


    def add_log_record(self, itemId, action, newValue, oldValue):
        """
                Parameters
         Name  Description  itemId  item ID 
         action  action (see the list below) 
         newValue  new value 
         oldValue  old value List of available actions:
         custom_msg; create_unit; update_name; update_access; update_unit_icon; update_unit_pass; update_unit_phone; update_unit_calcflags (update sensor calculation settings); update_unit_milcounter (update mileage counter value); update_unit_bytecounter (update GPRS traffic counter value); update_unit_ehcounter (update engine hours counter value); update_unit_uid; update_unit_hw (update device type); update_unit_hw_cfg (update device configuration); update_unit_fuel_cfg (update fuel consumption configuration); update_unit_trip_cfg (update trip detection configuration); create_sensor; update_sensor; delete_sensor; create_alias (create command); update_alias (update command); delete_alias (delete command); create_service_interval; update_service_interval; delete_service_interval; create_custom_field; update_custom_field; delete_custom_field; import_item_cfg; import_unit_cfg; export_unit_msgs; import_unit_msgs; delete_unit_msg; delete_unit_msgs; bind_unit_driver; unbind_unit_driver; bind_unit_trailer; unbind_unit_trailer; update_unit_report_cfg (update parameters used in reports); update_msgs_filter_cfg (update filtration of unit position information in messages); delete_item; create_user; update_hosts_mask; update_user_pass; update_user_flags; create_user_notify; delete_user_notify; create_group; units_group (add/remove units to/from unit group); update_driver_units (update the list of auto attachable units for drivers); update_trailer_units (update the list of auto attachable units for trailers); create_resource; create_zone; update_zone; delete_zone; create_poi; update_poi; delete_poi; create_job; switch_job; update_job; delete_job; create_notify; switch_notify; update_notify; delete_notify; create_driver; update_driver; delete_driver; create_trailer; update_trailer; delete_trailer; create_drivers_group; update_drivers_group; delete_drivers_group; create_trailers_group; update_trailers_group; delete_trailers_group; create_report (create report template); update_report (update report template); delete_report (delete report template); import_pois; import_zones; create_retranslator; update_retranslator; units_retranslator (add units for retranslation); switch_retranslator; create_route; update_route_points; update_route_cfg; create_round; update_round; delete_round; create_schedule; update_schedule; delete_schedule; create_account; delete_account; switch_account; update_dealer_rights; do_payment; update_account_flags; update_account_min_days; update_account_plan; update_account_history_period; update_account_subplans; create_service; update_service; delete_service.Response{}/* empty object if execution successful, if not - error code */
        
        """
        params = locals()
        params.pop('self')
        return self.session.call("item/add_log_record", **params)


    def delete_item(self, itemId):
        """
                 You can find an example of this request in the sample Creating, editing and deleting items.
        Parameters
         Name  Description  itemId  item ID Response{}/* empty object if execution successful, if not - error code */
        
        """
        params = locals()
        params.pop('self')
        return self.session.call("item/delete_item", **params)


    def update_custom_field(self, itemId, id, callMode, n, v):
        """
                Parameters
         Name  Description  itemId  item ID 
         id  custom field ID (not taken into account when creating; IDs for new custom fields are generated by the system) 
         callMode  action: create, update, delete 
         Optional parameters (required for create and update)  
         n  custom field name 
         v  custom field value Response
        When creating or updating custom fields, response format will be:[
        <long>,/* custom field ID */
        {
        "id":<long>,/* custom field ID */
        "n":<text>,/* name */
        "v":<text>/* value */
        }
        ]When deleting:[
        <long>,/* custom field ID */
        null
        ]
        
        """
        params = locals()
        params.pop('self')
        return self.session.call("item/update_custom_field", **params)


    def update_measure_units(self, itemId, type, flags):
        """
                Parameters
         Name  Description  itemId  item ID 
         type  target measurement (0 - metric,1 - U.S.,2 - imperial) 
         flags  0 - set measurement, 1 - convert values and set measurement Response{}/* empty object if execution successful, if not - error code */
        
        """
        params = locals()
        params.pop('self')
        return self.session.call("item/update_measure_units", **params)


    def list_backups(self, itemId):
        """
                Params
         Name  Description  itemId  item id Response{
        "result": [
        {
        "date":<text>,/* дата */
        "t":<uint>,/* время создания */
        "unitId":<long>,/* id элемента/объекта */
        "id":<long>,/* id файла */
        "name":/* имя файла */
        },
        ...
        ]
        }
        
        """
        params = locals()
        params.pop('self')
        return self.session.call("item/list_backups", **params)
